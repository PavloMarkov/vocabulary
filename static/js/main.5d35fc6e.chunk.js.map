{"version":3,"sources":["store/wordsSlice.ts","store/index.ts","defaultWords.ts","components/DefaultWords.tsx","components/Input.tsx","store/hooks.ts","components/ButtonsOfChecking.tsx","components/WordsChecking.tsx","components/WordsList.tsx","App.tsx","index.tsx"],"names":["wordsSlice","createSlice","name","initialState","words","isCheckingWords","results","reducers","addDefaultWords","state","action","push","payload","addWord","engWord","translateWord","checkingTenWords","addTestResults","actions","store","configureStore","reducer","wordsReducer","defaultWords","DefaultWords","dispatch","useDispatch","useState","isNotUsedDefaultWords","setIsNotUsedDefaultWords","type","onClick","Input","setEngWord","setTranslateWord","htmlFor","id","value","onChange","e","target","disabled","useAppSelector","useSelector","ButtonsOfChecking","WordsChecking","allWords","numberWord","setNumberWord","correctAnswers","setCorrectAnswers","wordsToCheck","setWordsToCheck","randomIndex","Math","floor","random","length","useEffect","randomWords","i","console","log","index","includes","addRandomWords","prev","WordsList","map","word","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d35fc6e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { Word } from '../types/Word';\n\nexport interface WordsState {\n  words: Word[];\n  isCheckingWords: boolean;\n  results: number[];\n}\n\nconst initialState: WordsState = {\n  words: [],\n  isCheckingWords: false,\n  results: [],\n};\n\nconst wordsSlice = createSlice({\n  name: 'words',\n  initialState,\n  reducers: {\n    addDefaultWords(state, action) {\n      state.words.push(...action.payload);\n    },\n    addWord(state, action) {\n      state.words.push({\n        engWord: action.payload.engWord,\n        translateWord: action.payload.translateWord,\n      });\n    },\n    checkingTenWords(state) {\n      // eslint-disable-next-line no-param-reassign\n      state.isCheckingWords = !state.isCheckingWords;\n    },\n    addTestResults(state, action) {\n      state.results.push(action.payload);\n    },\n  },\n});\n\nexport const {\n  addDefaultWords, addWord, checkingTenWords, addTestResults,\n} = wordsSlice.actions;\n\nexport default wordsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport wordsReducer from './wordsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    words: wordsReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import { Word } from './types/Word';\n\nexport const defaultWords: Word[] = [\n  {\n    engWord: 'one',\n    translateWord: 'один',\n  },\n  {\n    engWord: 'two',\n    translateWord: 'два',\n  },\n  {\n    engWord: 'three',\n    translateWord: 'три',\n  },\n  {\n    engWord: 'four',\n    translateWord: 'чотири',\n  },\n  {\n    engWord: 'five',\n    translateWord: 'п\\'ять',\n  },\n  {\n    engWord: 'six',\n    translateWord: 'шість',\n  },\n  {\n    engWord: 'seven',\n    translateWord: 'сім',\n  },\n  {\n    engWord: 'eight',\n    translateWord: 'вісім',\n  },\n  {\n    engWord: 'nine',\n    translateWord: 'дев\\'ять',\n  },\n  {\n    engWord: 'ten',\n    translateWord: 'десять',\n  },\n  {\n    engWord: 'eleven',\n    translateWord: 'одинадцять',\n  },\n];\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { defaultWords } from '../defaultWords';\nimport { addDefaultWords } from '../store/wordsSlice';\n\nexport const DefaultWords: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const [isNotUsedDefaultWords, setIsNotUsedDefaultWords] = useState(true);\n\n  return (\n    <div>\n      {isNotUsedDefaultWords\n        ? <p>Use Default words?</p>\n        : <p>Default words were used</p>}\n      {isNotUsedDefaultWords && (\n        <button\n          type=\"button\"\n          onClick={() => {\n            dispatch(addDefaultWords(defaultWords));\n            setIsNotUsedDefaultWords(false);\n          }}\n        >\n          Default words\n        </button>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addWord, checkingTenWords } from '../store/wordsSlice';\nimport { DefaultWords } from './DefaultWords';\n\nexport const Input: React.FC = () => {\n  const [engWord, setEngWord] = useState('');\n  const [translateWord, setTranslateWord] = useState('');\n\n  const dispatch = useDispatch();\n\n  const createNewWord = (eng: string, translate: string) => ({\n    engWord: eng,\n    translateWord: translate,\n  });\n\n  const clearInputs = () => {\n    setEngWord('');\n    setTranslateWord('');\n  };\n\n  return (\n    <div>\n      <DefaultWords />\n      <form>\n        <div>\n          <label\n            htmlFor=\"engWordInput\"\n          >\n            Enter word in English\n            <input\n              type=\"text\"\n              id=\"engWordInput\"\n              value={engWord}\n              onChange={(e) => setEngWord(e.target.value)}\n            />\n          </label>\n        </div>\n        <div>\n          <label\n            htmlFor=\"engTranslateInput\"\n          >\n            Enter the translation\n            <input\n              type=\"text\"\n              id=\"engTranslateInput\"\n              value={translateWord}\n              onChange={(e) => setTranslateWord(e.target.value)}\n            />\n          </label>\n        </div>\n        <button\n          type=\"button\"\n          disabled={engWord === '' || translateWord === ''}\n          onClick={() => {\n            dispatch(addWord(createNewWord(engWord, translateWord)));\n            clearInputs();\n          }}\n        >\n          add word\n        </button>\n        <div>\n          <button\n            type=\"button\"\n            onClick={() => {\n              dispatch(checkingTenWords());\n            }}\n          >\n            check words\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport type { RootState } from './index';\n\n// Use these hooks everywhere instead of useDispatch and useSelector\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\n\nexport const ButtonsOfChecking = () => {\n  return (\n    <div>\n      hello\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../store/hooks';\nimport { addTestResults, checkingTenWords } from '../store/wordsSlice';\nimport { Word } from '../types/Word';\nimport { ButtonsOfChecking } from './ButtonsOfChecking';\n\nexport const WordsChecking: React.FC = () => {\n  const dispatch = useDispatch();\n  const allWords = useAppSelector(state => state.words.words);\n  const [numberWord, setNumberWord] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [wordsToCheck, setWordsToCheck] = useState<Word[]>([]);\n\n  const randomIndex = () => Math.floor(Math.random() * allWords.length);\n\n  useEffect(() => {\n    const randomWords: Word[] = [];\n    const addRandomWords = () => {\n      for (let i = 0; i < 10; i += 1) {\n        // eslint-disable-next-line no-console\n        console.log(randomWords);\n\n        let index = randomIndex();\n\n        while (randomWords.includes(allWords[index])) {\n          index = randomIndex();\n        }\n\n        randomWords[i] = (allWords[index]);\n      }\n    };\n\n    addRandomWords();\n\n    setWordsToCheck(randomWords);\n  }, []);\n\n  if (numberWord > 9) {\n    dispatch(addTestResults(correctAnswers));\n    dispatch(checkingTenWords());\n  }\n\n  return (\n    <div>\n      <button\n        type=\"button\"\n        onClick={() => dispatch(checkingTenWords())}\n      >\n        Exit\n      </button>\n      <div>\n        {allWords.length >= 10\n          ? 'Let\\'s start the checking!'\n          : `Words to check is less then 10. Add ${10 - allWords.length} words or use default words`}\n      </div>\n      {wordsToCheck.length >= 10 && (\n        <div>\n          {`${wordsToCheck[numberWord].engWord} is:`}\n          <button\n            type=\"button\"\n            onClick={() => {\n              setNumberWord(prev => prev + 1);\n              setCorrectAnswers(prev => prev + 1);\n            }}\n          >\n            {`${wordsToCheck[numberWord].translateWord}`}\n          </button>\n        </div>\n      )}\n      <ButtonsOfChecking />\n    </div>\n  );\n};\n","import React from 'react';\nimport { useAppSelector } from '../store/hooks';\nimport { Word } from '../types/Word';\n\nexport const WordsList: React.FC = () => {\n  const words: Word[] = useAppSelector(state => state.words.words);\n\n  return (\n    <div>\n      {words.length === 0\n        ? 'Add words to your vocabulary'\n        : (\n          <table>\n            <thead>\n              <tr>\n                <td>\n                  #\n                </td>\n                <td>\n                  English\n                </td>\n                <td>\n                  Translate\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              {words.map((word, i) => (\n                <tr\n                  key={`${word.engWord}${word.translateWord}`}\n                >\n                  <td>\n                    {i + 1}\n                  </td>\n                  <td>\n                    {word.engWord}\n                  </td>\n                  <td>\n                    {word.translateWord}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Input } from './components/Input';\nimport { WordsChecking } from './components/WordsChecking';\nimport { WordsList } from './components/WordsList';\nimport { useAppSelector } from './store/hooks';\n\nexport const App: React.FC = () => {\n  const isCheckingWords = useAppSelector(state => state.words.isCheckingWords);\n\n  return (\n    <div className=\"starter\">\n      {!isCheckingWords && (\n        <>\n          <Input />\n          <WordsList />\n        </>\n      )}\n      {isCheckingWords && (\n        <WordsChecking />\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}