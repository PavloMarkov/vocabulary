{"version":3,"sources":["store/wordsSlice.ts","store/index.ts","components/NotFoundPage.tsx","components/Input.tsx","store/hooks.ts","components/WordsChecking.tsx","defaultWords.ts","components/DefaultWords.tsx","components/WordsList.tsx","components/Results.tsx","components/PreviousResults.tsx","App.tsx","index.tsx"],"names":["wordsSlice","createSlice","name","initialState","words","results","reducers","addDefaultWords","state","action","push","payload","addWord","engWord","translateWord","addTestResults","actions","store","configureStore","reducer","wordsReducer","NotFoundPage","Input","useState","setEngWord","setTranslateWord","dispatch","useDispatch","htmlFor","type","id","value","onChange","e","target","disabled","onClick","to","useAppSelector","useSelector","WordsChecking","allWords","wordsToCheck","setWordsToCheck","numberWord","setNumberWord","correctAnswers","setCorrectAnswers","useEffect","randomWords","_","sampleSize","orderOfBtns","length","filter","el","randomVariants","shuffle","slice","variants","navigate","useNavigate","className","map","btn","prev","defaultWords","DefaultWords","WordsList","word","i","Results","allResult","lastResult","PreviousResults","totalRes","reduce","acc","res","avarageRes","Math","floor","App","path","element","replace","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2ee6665.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { Word } from '../types/Word';\n\nexport interface WordsState {\n  words: Word[];\n  results: number[];\n}\n\nconst initialState: WordsState = {\n  words: [],\n  results: [],\n};\n\nconst wordsSlice = createSlice({\n  name: 'words',\n  initialState,\n  reducers: {\n    addDefaultWords(state, action) {\n      state.words.push(...action.payload);\n    },\n    addWord(state, action) {\n      state.words.push({\n        engWord: action.payload.engWord,\n        translateWord: action.payload.translateWord,\n      });\n    },\n    addTestResults(state, action) {\n      state.results.push(action.payload);\n    },\n  },\n});\n\nexport const {\n  addDefaultWords, addWord, addTestResults,\n} = wordsSlice.actions;\n\nexport default wordsSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport wordsReducer from './wordsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    words: wordsReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = () => {\n  return (\n    <div>\n      Page not found\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { addWord } from '../store/wordsSlice';\n\nexport const Input: React.FC = () => {\n  const [engWord, setEngWord] = useState('');\n  const [translateWord, setTranslateWord] = useState('');\n\n  const dispatch = useDispatch();\n\n  const createNewWord = (eng: string, translate: string) => ({\n    engWord: eng,\n    translateWord: translate,\n  });\n\n  const clearInputs = () => {\n    setEngWord('');\n    setTranslateWord('');\n  };\n\n  return (\n    <div>\n      <form>\n        <div>\n          <label\n            htmlFor=\"engWordInput\"\n          >\n            Enter word in English\n            <input\n              type=\"text\"\n              id=\"engWordInput\"\n              value={engWord}\n              onChange={(e) => setEngWord(e.target.value)}\n            />\n          </label>\n        </div>\n        <div>\n          <label\n            htmlFor=\"engTranslateInput\"\n          >\n            Enter the translation\n            <input\n              type=\"text\"\n              id=\"engTranslateInput\"\n              value={translateWord}\n              onChange={(e) => setTranslateWord(e.target.value)}\n            />\n          </label>\n        </div>\n        <button\n          type=\"button\"\n          disabled={engWord === '' || translateWord === ''}\n          onClick={() => {\n            dispatch(addWord(createNewWord(engWord, translateWord)));\n            clearInputs();\n          }}\n        >\n          add word\n        </button>\n        <div>\n          <Link to=\"/checking\">\n            check words\n          </Link>\n        </div>\n      </form>\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport type { RootState } from './index';\n\n// Use these hooks everywhere instead of useDispatch and useSelector\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Link, useNavigate } from 'react-router-dom';\nimport React, { useEffect, useState } from 'react';\nimport _ from 'lodash';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../store/hooks';\nimport { addTestResults } from '../store/wordsSlice';\nimport { Word } from '../types/Word';\n\nexport const WordsChecking: React.FC = () => {\n  const dispatch = useDispatch();\n  const allWords = useAppSelector(state => state.words.words);\n  const [wordsToCheck, setWordsToCheck] = useState<Word[]>([]);\n  const [numberWord, setNumberWord] = useState(0);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n\n  useEffect(() => {\n    const randomWords: Word[] = _.sampleSize(allWords, 10);\n\n    setWordsToCheck(randomWords);\n\n    return () => setWordsToCheck([]);\n  }, []);\n\n  const variants = () => {\n    const words = _.filter(allWords, el => el.engWord !== wordsToCheck[numberWord].engWord);\n    const randomVariants = _.shuffle(words).slice(0, 3);\n\n    return _.shuffle([wordsToCheck[numberWord], ...randomVariants]);\n  };\n\n  const canWork = wordsToCheck.length > 0 && numberWord < 10;\n\n  const orderOfBtns = canWork\n    ? variants()\n    : [];\n\n  const navigate = useNavigate();\n\n  return (\n    <div>\n      <div>\n        <Link to=\"/\">\n          Exit\n        </Link>\n      </div>\n      <div>\n        {allWords.length >= 10\n          ? 'Let\\'s start the checking!'\n          : `Words to check is less then 10. Add ${10 - allWords.length} words or use default words`}\n      </div>\n      {wordsToCheck.length === 10 && numberWord < 10 && (\n        <div>\n          {`${wordsToCheck[numberWord].engWord} is:`}\n          <div className=\"buttons\">\n            {orderOfBtns.map((btn) => (\n              <button\n                key={btn.engWord}\n                type=\"button\"\n                onClick={() => {\n                  if (wordsToCheck[numberWord].translateWord === btn.translateWord) {\n                    setCorrectAnswers(prev => prev + 1);\n                  }\n\n                  if (numberWord === 9) {\n                    if (wordsToCheck[numberWord].translateWord === btn.translateWord) {\n                      dispatch(addTestResults(correctAnswers + 1));\n                    } else {\n                      dispatch(addTestResults(correctAnswers));\n                    }\n\n                    navigate('/results');\n                  }\n\n                  setNumberWord(prev => prev + 1);\n                }}\n              >\n                {`${btn.translateWord}`}\n              </button>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { Word } from './types/Word';\n\nexport const defaultWords: Word[] = [\n  {\n    engWord: 'one',\n    translateWord: 'один',\n  },\n  {\n    engWord: 'two',\n    translateWord: 'два',\n  },\n  {\n    engWord: 'three',\n    translateWord: 'три',\n  },\n  {\n    engWord: 'four',\n    translateWord: 'чотири',\n  },\n  {\n    engWord: 'five',\n    translateWord: 'п\\'ять',\n  },\n  {\n    engWord: 'six',\n    translateWord: 'шість',\n  },\n  {\n    engWord: 'seven',\n    translateWord: 'сім',\n  },\n  {\n    engWord: 'eight',\n    translateWord: 'вісім',\n  },\n  {\n    engWord: 'nine',\n    translateWord: 'дев\\'ять',\n  },\n  {\n    engWord: 'ten',\n    translateWord: 'десять',\n  },\n  {\n    engWord: 'eleven',\n    translateWord: 'одинадцять',\n  },\n];\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { defaultWords } from '../defaultWords';\nimport { useAppSelector } from '../store/hooks';\nimport { addDefaultWords } from '../store/wordsSlice';\n\nexport const DefaultWords: React.FC = () => {\n  const dispatch = useDispatch();\n  const allWords = useAppSelector(state => state.words.words);\n\n  return (\n    <div>\n      {allWords.length < 10\n        ? <p>Use Default words?</p>\n        : ''}\n      {allWords.length < 10 && (\n        <button\n          type=\"button\"\n          onClick={() => {\n            dispatch(addDefaultWords(defaultWords));\n          }}\n        >\n          Default words\n        </button>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAppSelector } from '../store/hooks';\nimport { Word } from '../types/Word';\nimport { DefaultWords } from './DefaultWords';\n\nexport const WordsList: React.FC = () => {\n  const words: Word[] = useAppSelector(state => state.words.words);\n\n  return (\n    <div>\n      <DefaultWords />\n      <div>\n        <Link to=\"/input\">\n          add word\n        </Link>\n      </div>\n      <div>\n        <Link to=\"/checking\">\n          check words\n        </Link>\n      </div>\n      {words.length === 0\n        ? 'Add words to your vocabulary'\n        : (\n          <table>\n            <thead>\n              <tr>\n                <td>\n                  #\n                </td>\n                <td>\n                  English\n                </td>\n                <td>\n                  Translate\n                </td>\n              </tr>\n            </thead>\n            <tbody>\n              {words.map((word, i) => (\n                <tr\n                  key={`${word.engWord}${word.translateWord}`}\n                >\n                  <td>\n                    {i + 1}\n                  </td>\n                  <td>\n                    {word.engWord}\n                  </td>\n                  <td>\n                    {word.translateWord}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAppSelector } from '../store/hooks';\n\nexport const Results: React.FC = () => {\n  const allResult = useAppSelector(state => state.words.results);\n  const lastResult = allResult[allResult.length - 1];\n\n  return (\n    <>\n      <div>\n        {`Total ammount of correct answer is - ${lastResult}`}\n      </div>\n      <h1>\n        {`${(lastResult / 10) * 100} %`}\n      </h1>\n      <div>\n        <Link to=\"/\">\n          Return to Home Page\n        </Link>\n      </div>\n      <div>\n        <Link to=\"/history\">\n          Previous results\n        </Link>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useAppSelector } from '../store/hooks';\n\nexport const PreviousResults: React.FC = () => {\n  const allResult = useAppSelector(state => state.words.results);\n  const totalRes = allResult.reduce((acc, res) => acc + res, 0);\n  const avarageTotalRes = Math.floor((totalRes / allResult.length) * 100) / 100;\n  const avarageRes = (avarageTotalRes / 10) * 100 || 0;\n\n  return (\n    <>\n      <h1>\n        All your previous results:\n      </h1>\n      <ul>\n        {allResult.map((res, i) => (\n          // eslint-disable-next-line react/no-array-index-key\n          <li key={i}>\n            {res}\n          </li>\n        ))}\n      </ul>\n      <h3>\n        Avarage result of all words checking is:\n      </h3>\n      <h2>\n        {`${avarageRes} %`}\n      </h2>\n      <div>\n        <Link to=\"/\">\n          Return to Home Page\n        </Link>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { NotFoundPage } from './components/NotFoundPage';\nimport { Input } from './components/Input';\nimport { WordsChecking } from './components/WordsChecking';\nimport { WordsList } from './components/WordsList';\nimport { Results } from './components/Results';\nimport { PreviousResults } from './components/PreviousResults';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"container\">\n      <Routes>\n        <Route path=\"/\" element={<WordsList />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n        <Route path=\"input\" element={<Input />} />\n        <Route path=\"checking\" element={<WordsChecking />} />\n        <Route path=\"results\" element={<Results />} />\n        <Route path=\"history\" element={<PreviousResults />} />\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Routes>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}